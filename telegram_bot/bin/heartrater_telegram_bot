#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
import math
import os
import requests
import time

from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

CHECK_INTERVAL = 30

# TODO: make global config
CONFIG_DIR = os.getenv('HEARTRATER_CONFIG_DIR', '/etc/heartrater')
LOGS_DIR = os.getenv('HEARTRATER_LOGS_DIR', '/var/log/heartrater')
HOST = os.getenv('HEARTRATER_HOST', 'http://antonchek.me')
GET_RATE_URL_PATH = os.getenv('HEARTRATER_GET_RATE_URL_PATH', 'heartrater/get')
TELEGRAM_BOT_PORT = os.getenv('HEARTRATER_TELEGRAM_BOT_PORT', 5050)
CHECK_PANIC_URL_PATH = os.getenv('HEARTRATER_GET_RATE_URL_PATH', 'heartrater/check_panic')

TOKEN_PATH = os.path.join(CONFIG_DIR, '.telegram_token')
SERVER_TOKEN_PATH = os.path.join(CONFIG_DIR, '.server_token')

TOKEN = None
with open(TOKEN_PATH, 'r') as file_input:
    TOKEN = file_input.read().strip()

SERVER_TOKEN = None
with open(SERVER_TOKEN_PATH, 'r') as file_input:
    SERVER_TOKEN = file_input.read().strip()

CHECK_PANIC_URL = os.path.join(HOST, CHECK_PANIC_URL_PATH) + '?token=' + SERVER_TOKEN

# Enable logging
_logger_ = logging.getLogger("heartrater_telegram_bot")
_logger_.setLevel(logging.DEBUG)

log_file_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'telegram_bot.log'))
log_file_handler.setLevel(logging.DEBUG)
log_console_handler = logging.StreamHandler()
log_console_handler.setLevel(logging.DEBUG)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
log_file_handler.setFormatter(formatter)
log_console_handler.setFormatter(formatter)
_logger_.addHandler(log_console_handler)
_logger_.addHandler(log_file_handler)


def check_panic_age():
    _logger_.info('Check panic age')
    
    try:
        response = requests.get(url=CHECK_PANIC_URL, timeout=3.0)
        has_panic = response.json().get('has_panic')

        if has_panic is None:
            _logger_.error('Bad response: %s' % str(response))
            return None
       
        if not has_panic:
            _logger_.info('No panics')
            return None

        first_panic_timestamp = response.json().get('first_panic_timestamp') 
        if first_panic_timestamp is None: # or not first_panic_timestamp.isdigit():
            _logger_.error('Bad response: %s' % str(response))
            return None

        return round(time.time() - float(first_panic_timestamp))

    except (requests.ConnectTimeout,
            requests.ConnectionError,
            requests.HTTPError,
            json.JSONDecodeError,
            requests.ReadTimeout,
            requests.Timeout):
        _logger_.error('Bad request.')
        return None
    

def check_panic(context):
    _logger_.info('Check panic')

    if not context.job.context or 'chat_id' not in context.job.context:
        return
    chat_id = context.job.context['chat_id']

    panic_age = check_panic_age()
    if panic_age is None:
        return
    
    panic_age_minutes = math.ceil(float(panic_age) / 60) 
    panic_message = u'üìå–ü—É–ª—å—Å –Ω–µ –ø—Ä–æ—â—É–ø—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d –º–∏–Ω—É—Ç‚ùóÔ∏è\n' % panic_age_minutes 
    context.bot.send_message(chat_id=chat_id, text=panic_message)
    
    _logger_.warn('Panic! %s, %s' % (chat_id, panic_message))


def start(update, context):
    """Send a message when the command /start is issued."""
    _logger_.info('Start bot: %s, %s' % (update, context))

    chat_id = update.message.chat.id
    context.job_queue.run_repeating(check_panic, interval=CHECK_INTERVAL, first=0,
                                    context={'chat_id': chat_id})


def help(update, context):
    """Send a message when the command /help is issued."""
    update.message.reply_text('Help!')


def echo(update, context):
    """Echo the user message."""
    _logger_.info('Receive message: %s, %s' % (update, context))
   
    chat_id = update.message.chat.id
    context.job_queue.run_repeating(check_panic, interval=CHECK_INTERVAL, first=0,
                                    context={'chat_id': chat_id})


def error(update, context):
    """Log Errors caused by Updates."""
    _logger_.error('Update "%s" caused error "%s"', update, context.error)


def main():
    """Start the bot."""
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help))
    dispatcher.add_handler(MessageHandler(Filters.text, echo))
    dispatcher.add_error_handler(error)

    updater.start_polling()
    _logger_.info('Bot initialized')
    updater.idle()


if __name__ == '__main__':
    main()
